"
"
"
" jaguardeer's vimrc
"
"	-pathogen
"	-solarized
"	-gundo
"	-ergonomic bindings
"

set nocompatible

" OPTIONS
set tabstop=4		" set indent depth
set shiftwidth=4
set confirm
set backup			" keep a backup file (restore to previous version)
set undofile		" keep an undo file (undo changes after closing)
set history=100		" keep command line history
set ruler			" show the cursor position all the time
set showcmd			" display incomplete commands
set incsearch		" do incremental searching
set ignorecase		" smartcase default search
set smartcase
set backspace=indent,eol,start " delete everything
set nu			" Set line numbers and highlight
set cursorline

set timeoutlen=1000 ttimeoutlen=0 " make <ESC> respond better

set showbreak=└
" set list
set listchars=extends:»,precedes:« ",eol:┐,tab:>–,trail:░
" hi SpecialKey cterm=NONE ctermfg=235 ctermbg=NONE
" hi NonText cterm=NONE ctermfg=235 ctermbg=NONE

" Set user directory to ~/.vim
set backupdir=$HOME/.vim/vimbak
set undodir=$HOME/.vim/vimbak
set viminfo+=n$HOME/.vim/viminfo

set tags=./tags; 		" set default tags search dir

" allow mouse
if has('mouse')
  set mouse=a
endif

" syntax and colors
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

filetype plugin indent on

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif



" KEY MAPPINGS

" safer C-U
inoremap <C-U> <C-G>u<C-U>

" make some key mappings
let mapleader = " "
nnoremap <leader><leader>r :source ~/.vim/vimrc<CR>
nnoremap <leader><leader>n :set nohlsearch<CR>
nnoremap <leader><leader>h :set hls<CR>
nnoremap <leader><leader>j :set incsearch<CR>
nnoremap <leader><leader>m :set noincsearch<CR>
" screen navigation
nnoremap <C-y> <C-d>
nnoremap <C-d> <C-b>
nnoremap <C-k> <C-y>
nnoremap <C-j> <C-e>
nnoremap <C-e> <C-k>
" ; is easier than :, switch , and ;
noremap ; :
noremap : ,
noremap , ;
noremap q; q:
noremap q: q;
" C-w goes to previous window
nnoremap <C-w><C-w> <C-w><C-p>
nnoremap <C-w><C-p> <C-w><C-w>
" definition is last mark usually
nnoremap <C-]> 9<C-]>
" make <CR> jump to line N
nnoremap <CR> G
" swap mark and register
noremap ' "
noremap " '
noremap "" ''
" reduce shift toggling for copypasta
noremap '8 "*
noremap '* "8
" noshift for +
noremap = +
noremap + =
" Q = qq (and can end macros too)
nnoremap Q qq<esc>
" yY doesnt yank newline
nnoremap yY ^y$
" make Y behave like D
nnoremap Y y$
" make K behave like J
nnoremap K kJ
" start normal ex easier
vnoremap ( :norm
" build stuff with make
nnoremap <F4> :make<CR>
" navigate by visual lines with j/k
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k





" PLUGINS
execute pathogen#infect()


" use gundo
nnoremap <F5> :GundoToggle<CR>

" make YCM and UltiSnips play nice
" let g:ycm_server_log_level = 'debug'
let g:ycm_global_ycm_extra_conf = '/home/paco/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_key_list_select_completion=['<tab>']
let g:ycm_key_list_previous_completion=['<s-tab>']
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"
let g:UltiSnipsEditSplit="vertical"

map <leader> <plug>(easymotion-prefix)
nmap <leader>. <plug>(easymotion-repeat)
nmap S <plug>(easymotion-s)
map <leader>s <plug>(easymotion-s2)
map <leader>,w <Plug>CamelCaseMotion_w
map <leader>,b <Plug>CamelCaseMotion_b
map <leader>,e <Plug>CamelCaseMotion_e

" use fzf for search
set rtp+=~/.fzf

" GLSL syntax highlighting
autocmd BufNewFile,BufRead *.glsl,*.geom,*.vert,*.frag,*.gsh,*.vsh,*.fsh,*.vs,*.fs set filetype=glsl
"
" set colorscheme to solarized
set background=dark
if &t_Co == 256
	let g:solarized_termcolors=256
endif
colorscheme solarized
" adjust colors a little bit
hi CursorLineNR ctermfg=Red
hi VertSplit ctermfg=black
hi MatchParen ctermbg=black ctermfg=grey
" highlight long lines
highlight ColorColumn ctermbg=black ctermfg=red
call matchadd('ColorColumn', '\%85v', 100)
